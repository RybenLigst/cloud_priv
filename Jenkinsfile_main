pipeline {
  agent any

  environment {
    DOCKER_CREDENTIALS_ID = 'docker'
  }

  stages {
    stage('Build SQL Server container') {
      steps {
        script {
          withCredentials([usernamePassword(credentialsId: DOCKER_CREDENTIALS_ID, passwordVariable: 'DOCKER_PASSWORD', usernameVariable: 'DOCKER_USERNAME')]) {
            sh '''
              echo $DOCKER_PASSWORD | docker login --username $DOCKER_USERNAME --password-stdin
              docker run -d -e "ACCEPT_EULA=Y" -e "MSSQL_SA_PASSWORD=Qwerty-1" -p 1434:1433 --name sql111 --hostname sql mcr.microsoft.com/mssql/server:2022-latest
            '''

          }
        }
      }
    }

    stage('Build FrontEnd image') {
      steps {
        script {
          sh 'docker build -t flappimen/proj:frontend ./FrontEnd/my-app/Dockerfile'
        }
      }
    }

    stage('Build BackEnd image') {
      steps {
        script {
          sh 'docker build -t flappimen/proj:backend ./BackEnd/Amazon-clone/Dockerfile'
        }
      }
    }

    stage('Login to Docker Hub (if needed)') {
      when {
        expression {
          sh(script: 'docker images flappimen/proj:version${BUILD_NUMBER} | grep -q .', returnStatus: true) == 0
        }
      }
      steps {
        script {
          withCredentials([usernamePassword(credentialsId: DOCKER_CREDENTIALS_ID, passwordVariable: 'DOCKER_PASSWORD', usernameVariable: 'DOCKER_USERNAME')]) {
            sh 'echo $DOCKER_PASSWORD | docker login --username $DOCKER_USERNAME --password-stdin'
          }
        }
      }
    }

    stage('Push images to Docker Hub (if needed)') {
      when {
        expression {
          sh(script: 'docker images flappimen/proj:version${BUILD_NUMBER} | grep -q .', returnStatus: true) == 0
        }
      }
      steps {
        script {
          sh 'docker push flappimen/proj:frontend'
          sh 'docker push flappimen/proj:backend'
          sh 'docker push flappimen/proj:version${BUILD_NUMBER}'
        }
      }
    }
  }
}
